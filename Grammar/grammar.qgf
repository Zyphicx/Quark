prim_type: INTEGER | DOUBLE

object_type: LIST

union: LESS QUESTION | prim_type | object_type | IDENTIFIER GREATER

type: prim_types | object_types | union

operator: PLUS | MINUS | STAR | SLASH | PERCENT | CARET

expr: IDENTIFIER | NUMBER (operator IDENTIFIER | NUMBER)*

assignment: IDENTIFIER EQUALS expr SEMICOLON

var_decl: type IDENTIFIER (EQUALS expr)-

if_statement: IF L_PAREN expr R_PAREN statement- (ELSE IF L_PAREN expr R_PAREN statement-)* (ELSE statement-)-

body: L_CURLY statement* R_CURLY

statement: assignment | if_statement

func_def: type IDENTIFIER L_PAREN (var_decl)- (COMMA var_decl)*






























arith_op: PLUS | MINUS | STAR | SLASH | PERCENT | CARET

comp_op: LESS | GREATER | EQUALS_EQUALS | EXCL_EQUALS | LESS_EQUALS | GREATER_EQUALS



bool_expr: expr (comp_op expr)*

var_def:

func_def

basic_stmt: (assign_stmt) SEMICOLON
